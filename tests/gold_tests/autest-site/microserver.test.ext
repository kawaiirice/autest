
from ports import bind_unused_port

def addMethod(self,testName, request_header, functionName):
    return 

# creates the full request or response block using headers and message data
def httpObject(self,header,data):
    r=dict()
    r["timestamp"]=""
    r["headers"]=header
    r["body"]=data
    return r

# addResponse adds customized response with respect to request_header. request_header and response_header are both dictionaries
def addResponse(self,filename, testName, request_header, response_header):
    txn = dict()
    txn["timestamp"] = ""
    txn["uuid"] = testName
    txn["request"] = request_header
    txn["response"] = response_header
    print("data dir",self.Variables.DataDir)
    addTransactionToSession(txn,filename)
    absFilepath=os.path.abspath(filename)
    self.Setup.CopyAs(absFilepath,self.Variables.DataDir)
    return

#adds transaction in json format to the specified file
def addTransactionToSession(txn,JFile):
    jsondata=None
    if os.path.exists(JFile):
        jf = open(JFile,'r')
        jsondata = json.load(jf)
    
    if jsondata == None:
        jsondata = dict()
        jsondata["version"]='0.1'
        jsondata["timestamp"]="1234567890.098"
        jsondata["encoding"]="url_encoded"
        jsondata["txns"]=list()
        jsondata["txns"].append(txn)
    else:
        jsondata["txns"].append(txn)
    with open(JFile,'w') as jf:
        jf.write(json.dumps(jsondata))
        

#make headers with the key and values provided        
def makeHeader(self,requestString, **kwargs):
    headerStr = requestString+'\r\n'
    for k,v in kwargs.iteritems():
        headerStr += k+': '+v+'\r\n'
    headerStr = headerStr+'\r\n'
    return headerStr


def MakeOriginServer(obj, name,public_ip=False):
    server_path= os.path.join(obj.Variables.AtsTestToolsDir,'microServer/uWServer.py')
    data_dir = os.path.join(obj.RunDirectory, name)
    sock,port = bind_unused_port()
    command = "python3 {0} --data-dir {1} --port {2} --public {3}".format(server_path, data_dir, port, public_ip)
    
    # create process
    p = obj.Processes.Process(name, command)
    p.Setup.MakeDir(data_dir)
    p.Variables.Port = port
    p.Variables.DataDir = data_dir
    AddMethodToInstance(p,addResponse)
    AddMethodToInstance(p,addTransactionToSession)

    return p

AddTestRunSet(MakeOriginServer,name="MakeOriginServer")
AddTestRunSet(MakeOriginServer,name="MakeOrigin")
